#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>

// Function to list files in a directory with selected attributes
void list_files(const char *dir_name) {
    DIR *dir;
    struct dirent *entry;
    struct stat file_stat;
    struct passwd *pwd;
    struct group *grp;
    char datetime[100];

    // Open directory
    dir = opendir(dir_name);
    if (dir == NULL) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }

    // Read directory entries
    while ((entry = readdir(dir)) != NULL) {
        char path[PATH_MAX];
        snprintf(path, PATH_MAX, "%s/%s", dir_name, entry->d_name);

        // Get file stats
        if (stat(path, &file_stat) == -1) {
            perror("Error getting file stats");
            continue;
        }

        // Print selected attributes
        printf("%ld ", (long)file_stat.st_ino);   // Inode number
        printf("%lu ", (unsigned long)file_stat.st_size);  // File size
        printf("%lo ", (unsigned long)file_stat.st_mode);  // File mode (permissions)

        // Number of hard links
        printf("%ld ", (long)file_stat.st_nlink);

        // Owner user and group
        pwd = getpwuid(file_stat.st_uid);
        if (pwd != NULL) {
            printf("%s ", pwd->pw_name);  // Owner user name
        } else {
            printf("%d ", file_stat.st_uid);  // Fall back to UID if user not found
        }

        grp = getgrgid(file_stat.st_gid);
        if (grp != NULL) {
            printf("%s ", grp->gr_name);  // Owner group name
        } else {
            printf("%d ", file_stat.st_gid);  // Fall back to GID if group not found
        }

        // Last modification time
        strftime(datetime, sizeof(datetime), "%b %d %H:%M", localtime(&file_stat.st_mtime));
        printf("%s ", datetime);

        // File name
        printf("%s\n", entry->d_name);
    }

    // Close directory
    closedir(dir);
}

int main(int argc, char *argv[]) {
    // Check if directory path is provided as a command-line argument
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <directory_path>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Print header
    printf("Inode   Size   Mode       Links  Owner  Group  Last Modified  Name\n");

    // List files in the specified directory
    list_files(argv[1]);

    return 0;
}
