#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int my_system(const char *command) {
    pid_t pid;
    int status;

    // Fork a child process
    pid = fork();

    if (pid == -1) {
        // Fork failed
        perror("Fork failed");
        return -1;
    } else if (pid == 0) {
        // Child process
        execl("/bin/sh", "sh", "-c", command, (char *)NULL);
        perror("Exec failed");
        exit(EXIT_FAILURE); // Should not reach here unless execl fails
    } else {
        // Parent process
        // Wait for the child process to complete
        waitpid(pid, &status, 0);

        // Check if child process exited normally
        if (WIFEXITED(status)) {
            return WEXITSTATUS(status); // Return the exit status of the child process
        } else {
            perror("Child process did not exit normally");
            return -1;
        }
    }
}

int main() {
    int status;

    printf("Executing command 'ls -l'\n");
    status = my_system("ls -l");

    printf("Command 'ls -l' exited with status: %d\n", status);

    printf("\nExecuting command 'echo Hello, World!'\n");
    status = my_system("echo Hello, World!");

    printf("Command 'echo Hello, World!' exited with status: %d\n", status);

    return 0;
}
